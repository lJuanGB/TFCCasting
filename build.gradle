plugins {
    id("java")
    id("com.matthewprenger.cursegradle") version "1.4.0"
    id("net.minecraftforge.gradle") version "5.1.+"
    id("org.parchmentmc.librarian.forgegradle") version "1.+"
    id("org.spongepowered.mixin") version "0.7.+"
}

version = "0.1.2-beta"
group = "com.ljuangbminecraft.tfcchannelcasting"
archivesBaseName = "tfcchannelcasting"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: '2022.03.13-1.18.2'
    //mappings channel: 'official', version: '1.18.2'
    
    // accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg") // Currently, this location cannot be changed from the default.

    runs {
        all {
            args("-mixin.config=tfcchannelcasting.mixins.json")

            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")
            property("forge.logging.markers", "REGISTRIES")
            property("forge.logging.console.level", "debug")

            jvmArgs("-ea", "-Xmx4G", "-Xms4G")

            mods {
                tfcchannelcasting {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory project.file("run")
        }

        server {
            workingDirectory project.file("run/server")
            arg("--nogui")
        }
    }
}

repositories {
    mavenCentral()
    maven {
        // JEI
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // Mirror for JEI
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        // Patchouli
        name = "BlameJared"
        url = "https://maven.blamejared.com"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    flatDir {
         dir "libs"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    //implementation(fg.deobf("tfc:TerraFirmaCraft-Forge-${minecraft_version}:${tfc_version}"))
    implementation fg.deobf("curse.maven:tfc-302973:${tfc_identifier}")

    // if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor("org.spongepowered:mixin:${mixin_version}:processor")
    // }

    // Patchouli
    implementation(fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}"))

    // Jade
    compileOnly(fg.deobf("curse.maven:jade-324717:${jade_version}"))
    runtimeOnly(fg.deobf("curse.maven:jade-324717:${jade_version}"))
    compileOnly(fg.deobf("curse.maven:top-245211:${top_version}"))
    //runtimeOnly(fg.deobf("curse.maven:top-245211:${top_version}"))

    // JEI
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}"))
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "tfcchannelcasting",
                "Specification-Vendor"    : "lJuanGB",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "lJuanGB",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "tfcchannelcasting.mixins.json"
        ])
    }
}

// idea {
//     module {
//         excludeDirs.add(file("run"))
//     }
// }

mixin {
    add(sourceSets.main, "tfcchannelcasting.refmap.json")
}

curseforge {
    apiKey = System.getenv("CURSEFORGE_API_KEY") ?: "nope"

    project {
        id = '820815'
        changelog = "[Changelog ${version}](https://github.com/lJuanGB/TFCCasting/releases/tag/v${project.version})"
        changelogType = "markdown"

        releaseType = project.version.contains("beta") ? "beta" : (project.version.contains("alpha") ? "alpha" : "release")
        addGameVersion("${minecraft_version}")

        mainArtifact jar

        relations {
            requiredDependency("patchouli")
            requiredDependency("terrafirmacraft")
            optionalDependency("jei")
        }
    }
}